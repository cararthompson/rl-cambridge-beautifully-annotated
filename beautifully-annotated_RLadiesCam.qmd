---
title: "Beautifully annotated: enhancing your ggplots with text"
subtitle: "RLadies Cambridge | `r verbaliseR::prettify_date('2023-02-23', uk_or_us = 'UK')`"
from: markdown+emoji
format:
  revealjs: 
    transition: none
    slide-number: false
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/light-logo.png
    theme: cararquarto.scss
    footer: |
        Slides and recording: [cararthompson.com/talks/beautifully-annotated](https://cararthompson.com/talks/beautifully-annotated)
filters:
 - code-visibility
 - lightbox
lightbox: auto
fig-height: 9
auto-animate: true
title-slide-attributes:
    data-background-image: "images/dark-background.png"
    data-background-size: stretch
    data-background-opacity: "1"
    data-background-color: black
---

# Intro {visibility=hidden}

## Hi there :wave: ! {transition="convex-in none-out"}


```{r setup}
knitr::opts_chunk$set(dev = "ragg_png")
```


üë© Cara Thompson

üë©‚Äçüíª Psychology PhD `|>` 
Analysis of postgraduate medical examinations `|>` 
Freelance data consultant specialising in dataviz and "enhanced" reproducible outputs

::: fragment
üíô Helping others maximise the impact of their expertise
:::
<br>

::: footer
Find out more: [cararthompson.com/about](https://cararthompson.com/about)
:::

## Today's goal {transition="none"}

**To equip you with some design tips and coding tricks to make the most of text in your plots.**

::: {.incremental}
- Explore how to be less dependent on annotations (I know... trust me!)
- Illustrate ways in which we can use colour and fonts to add text hierarchy and story-enhancing annotations
- Provide you with reusable code to implement these tips, introducing `{ggtext}`, `{geomtextpath}`
- Point to additional resources you can explore in your own time (links below slides) 
- Give feedback on your own plots
:::


# But first, please suspend all disbelief...

--- 

![](images/penguin-bakeoff.png)

## The Great Penguin Bake Off

The penguins had a baking competition to see which species could make the best banana loaf. Each species was given bananas of a different level of ripeness.

```{r}
#|fig.height: 6
library(palmerpenguins)
library(tidyverse)

ggplot(penguins,
       aes(x = species, 
           fill = species,
           y = bill_length_mm)) +
  geom_bar(show.legend = FALSE, 
           stat = "summary", 
           fun = "mean") +
  labs(title = "The taller the bar, the yummier the cake!") +
  theme_minimal(base_size = 20) +
  theme(axis.title = element_blank(),
        panel.grid = element_blank())
```

## The Great Penguin Bake Off

The penguins had a baking competition to see which species could make the best banana loaf. Each species was given bananas of a different level of ripeness.

```{r}
#|fig.height: 6
banana_type_palette <- list("Adelie" = "#89973d",
                            "Chinstrap" = "#e8b92f",
                            "Gentoo" = "#a45e41")

ggplot(penguins,
       aes(x = species, 
           fill = species,
           y = bill_length_mm)) +
  geom_bar(show.legend = FALSE, 
           stat = "summary", 
           fun = "mean") +
  scale_fill_manual(values = banana_type_palette) +
  labs(title = "The taller the bar, the yummier the cake!") +
  theme_minimal(base_size = 20) +
  theme(axis.title = element_blank(),
        panel.grid = element_blank())
```


## The Great Penguin Bake Off

The Adelie penguins decided to experiment with different quantities of banana in their mix. Each island chose a different quantity.

```{r}
#|fig.height: 6
penguins <- penguins %>%
  mutate(banana_quantity = case_when(species == "Adelie" & island == "Biscoe" ~ 1,
                                     species == "Adelie" & island == "Dream" ~ 0.6,
                                     species == "Adelie" & island == "Torgersen" ~ 0,
                                     TRUE ~ 1))

ggplot(filter(penguins, species == "Adelie"),
       aes(x = island, 
           fill = island,
           y = bill_length_mm)) +
  geom_bar(show.legend = FALSE, 
           stat = "summary", 
           fun = "mean",
           size = 1) +
  scale_alpha(range = c(0.1, 0.9)) +
  labs(title = "The taller the bar, the yummier the cake!") +
  theme_minimal(base_size = 20) +
  theme(axis.title = element_blank(),
        panel.grid = element_blank())
```


## The Great Penguin Bake Off

The Adelie penguins decided to experiment with different quantities of banana in their mix. Each island chose a different quantity.

```{r}
#|fig.height: 6
ggplot(filter(penguins, species == "Adelie"),
       aes(x = island, 
           fill = species,
           alpha = banana_quantity,
           y = bill_length_mm)) +
  geom_bar(show.legend = FALSE, 
           stat = "summary", 
           fun = "mean",
           size = 1.5,
           colour = banana_type_palette$Adelie) +
  scale_fill_manual(values = banana_type_palette) +
  scale_alpha(range = c(0.2, 1)) +
  labs(title = "The taller the bar, the yummier the cake!") +
  theme_minimal(base_size = 20) +
  theme(axis.title = element_blank(),
        panel.grid = element_blank())
```

## The Great Penguin Bake Off

The penguins also baked their cakes for different amounts of time. Here are the mean durations per species. Which species left their cakes in the oven for longest?

```{r}
#|fig.height: 6
duration_plot <- ggplot(penguins,
                        aes(x = species, 
                            fill = species,
                            y = bill_depth_mm)) +
  geom_bar(show.legend = FALSE, 
           stat = "summary", 
           fun = "mean") +
  scale_fill_manual(values = banana_type_palette) +
  theme_minimal(base_size = 20) +
  labs(x = "",
       y = "Time in the oven") +
  theme(panel.grid = element_blank())

duration_plot
```


## The Great Penguin Bake Off

The penguins also baked their cakes for different amounts of time. Here are the mean durations per species. Which species left their cakes in the oven for longest?

```{r}
duration_plot +
  coord_flip()
```


--- 

![](images/penguin-bakeoff.png)


## Five tips for beautiful annotations 

### <span style=color:#28A569>#1</span> - Use colour and orientation purposefully 

### <span style=color:#28A569>#2</span> - Add text hierarchy  {.faded}

### <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement  {.faded}

### <span style=color:#28A569>#4</span> - Highlight important patterns {.faded}

### <span style=color:#28A569>#5</span> - See how much you can declutter {.faded}

### <span style=color:#28A569>Bonus track</span> - `{gghighlight}`, Tee pipe and curved arrows {.faded}


# Let's get coding! {background=#2C3D4F}

# #1 - colour {visibility=hidden}

## Setting up our first plot

:::: {.columns}

::: {.column width=50%}


Using the ToothGrowth dataset

- Build into R for easy "codealongability"
- Namespacing
  - `package::function()` üïµÔ∏è
- Intriguing dataset (`?ToothGrowth`)
- Research question with a pattern to visualise and annotate

:::

::: {.column width=50%}

<center>

![](https://media.tenor.com/S5gVmtZuDGQAAAAC/guinea-pigs-cute.gif)

(Feel free to munch along!)

</center>

:::

::::

## Setting up our first plot 

With a few tips along the way

```{r}
#| output-location: column-fragment
#| echo: true
ToothGrowth %>%
  group_by(supp, dose) %>%
  summarise(mean_length = mean(len)) %>%
  ggplot(aes(x = dose,
             y = mean_length,
             fill = supp)) +
  geom_bar(stat = "identity")

```


## Setting up our first plot 

With a few tips along the way

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "8"
ToothGrowth %>%
  group_by(supp, dose) %>%
  summarise(mean_length = mean(len)) %>%
  ggplot(aes(x = dose,
             y = mean_length,
             fill = supp)) +
  geom_bar(stat = "identity",
           position = "dodge")

```


## Setting up our first plot 

With a few tips along the way

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "9-10"
ToothGrowth %>%
  group_by(supp, dose) %>%
  summarise(mean_length = mean(len)) %>%
  ggplot(aes(x = dose,
             y = mean_length,
             fill = supp)) +
  geom_bar(stat = "identity",
           position = "dodge", 
           colour = "#FFFFFF",
           size = 2)
```



## Setting up our first plot 

Mini tip: get rid of abbreviations

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "2-5|6,10"
ToothGrowth %>%
  mutate(supplement = 
           case_when(supp == "OJ" ~ "Orange Juice",
                     supp == "VC" ~ "Vitamin C",
                     TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  ggplot(aes(x = dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge", 
           colour = "#FFFFFF",
           size = 2)
```



## Setting up our first plot 

Mini tip: `theme_minimal()`

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "13"
ToothGrowth %>%
  mutate(supplement = 
           case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  ggplot(aes(x = dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge", 
           colour = "#FFFFFF",
           size = 2) +
  theme_minimal()
```


## Setting up our first plot 

Turning Dose into a categorical variable (fear not!)

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "5"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) +
  theme_minimal()
```


## Setting up our first plot 

Turning Dose into a categorical variable (fear not!) + facetting

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "13"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal()
```


## Setting up our first plot 

Adding some text (finally!)

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "13-17"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal()
```


## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

Legend + facet strip + colour + title... Wait, which one is which? 


:::: {.columns}

::: {.column width=50%}

::: {.fragment}

![](https://media1.giphy.com/media/ouE6OPO1MADM4/giphy.gif)

:::

:::


::: {.column width=50%}

```{r}
#| echo: false
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal()
```

::: 

::::


## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

:::: {.columns}

::: {.column width=50%}

::: {.fragment}

![](https://hips.hearstapps.com/hmg-prod/images/glass-of-orange-juice-with-oranges-1589917191.jpg)
:::

:::

::: {.column width=50%}


:::{.incremental}

- Orange juice is... orange! 
- Vitamin C is... also orange, but more red and "aggressive"
- Those green leaves look nice with those colours... 
- [imagecolorpicker.com](https://imagecolorpicker.com/)

:::

:::

::::


## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

Generating a colour palette, starting with orange juice! <span style='background:#fab909'>#fab909</span>

```{r}
#| echo: true
#| fig-height: 0.8
monochromeR::generate_palette("#db5a05", blend_colour = "red", n_colours = 3, view_palette = TRUE)
monochromeR::generate_palette("#3c6b30", "go_darker", n_colours = 2, view_palette = TRUE)
monochromeR::generate_palette("#0C1509", "go_lighter", n_colours = 6, view_palette = TRUE)
```


## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

Creating a named vector, for ease later

```{r}
#| echo: true
#| fig-height: 3
vit_c_palette <- c("Orange Juice" = "#fab909", 
                   "Vitamin C" = "#E93603",
                   light_text = "#323A30",
                   dark_text =  "#0C1509")

monochromeR::view_palette(vit_c_palette)

```


## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

Back to the plot! 

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: ""
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal()
```

## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

Add in our colours

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "18"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  scale_fill_manual(values = vit_c_palette) +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal()
```


## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

Use transparency to indicate dose

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "9"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(aes(alpha = dose),
           stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  scale_fill_manual(values = vit_c_palette) +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal()
```




## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

Use transparency to indicate dose - within limits

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "20"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(aes(alpha = dose),
           stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  scale_fill_manual(values = vit_c_palette) +
  scale_alpha(range = c(0.33, 1)) +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal()
```




## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

What is the dose unit again? `?ToothGrowth`

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "21-23"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(aes(alpha = dose),
           stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  scale_fill_manual(values = vit_c_palette) +
  scale_alpha(range = c(0.33, 1)) +
  scale_x_discrete(breaks = c("0.5", "1", "2"), 
                   labels = function(x) 
                     paste0(x, " mg/day")) +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal()
```


## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

Legend has always been redundant! 

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "24"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(aes(alpha = dose),
           stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  scale_fill_manual(values = vit_c_palette) +
  scale_alpha(range = c(0.33, 1)) +
  facet_wrap(supplement ~ ., ncol = 1) +
  scale_x_discrete(breaks = c("0.5", "1", "2"), labels = function(x) paste0(x, " mg/day")) +
  theme_minimal() +
  theme(legend.position = "none")
```


## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully

And I find this so much less confusing!

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "22"
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(aes(alpha = dose),
           stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  scale_fill_manual(values = vit_c_palette) +
  scale_alpha(range = c(0.4, 1)) +
  scale_x_discrete(breaks = c("0.5", "1", "2"), labels = function(x) paste0(x, " mg/day")) +
  coord_flip() +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal() +
  theme(legend.position = "none")

```

## <span style=color:#28A569>#1</span> - Use colour and orientation purposefully {background=#2C3D4F}

So much clearer, and we haven't even done any annotating! 

:::: {.columns}


::: {.column width=50%}

```{r}
#| echo: false
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  theme_minimal() +
  facet_wrap(supplement ~ ., ncol = 1)
```

:::

::: {.column width=50%}

```{r}
#| echo: false
ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(aes(alpha = dose),
           stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  scale_fill_manual(values = vit_c_palette) +
  scale_alpha(range = c(0.4, 1)) +
  scale_x_discrete(breaks = c("0.5", "1", "2"), labels = function(x) paste0(x, " mg/day")) +
  coord_flip() +
  theme_minimal() +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme(legend.position = "none")
```

:::

::::



## Five tips for beautiful annotations 

### <span style=color:#28A569>#1</span> - Use colour and orientation purposefully {.faded}

### <span style=color:#28A569>#2</span> - Add text hierarchy  

### <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement  {.faded}

### <span style=color:#28A569>#4</span> - Highlight important patterns {.faded}

### <span style=color:#28A569>#5</span> - See how much you can declutter {.faded}

### <span style=color:#28A569>Bonus track</span> - `{gghighlight}`, Tee pipe and curved arrows {.faded}



## <span style=color:#28A569>#2</span> - Add text hierarchy


::: {.fragment}
![](https://public-images.interaction-design.org/literature/articles/materials/0B2CNUOVN6c9pyGDHu5152HWB4dbdevsDWj0QBNK.jpg){width=80%}
:::

::: footer
Find out more: [https://www.interaction-design.org/](https://www.interaction-design.org/literature/article/the-ux-designer-s-guide-to-typography)
:::


## <span style=color:#28A569>#2</span> - Add text hierarchy

Time to start playing with `theme()`!

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "24|1|27"
basic_plot <- ToothGrowth %>%
  mutate(supplement = case_when(supp == "OJ" ~ "Orange Juice", supp == "VC" ~ "Vitamin C", TRUE ~ as.character(supp))) %>%
  group_by(supplement, dose) %>%
  summarise(mean_length = mean(len)) %>%
  mutate(categorical_dose = factor(dose)) %>%
  ggplot(aes(x = categorical_dose,
             y = mean_length,
             fill = supplement)) +
  geom_bar(aes(alpha = dose),
           stat = "identity",
           position = "dodge",
           colour = "#FFFFFF", 
           size = 2) + 
  labs(x = "Dose",
       y = "Mean length (mm)",
       title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C",
       subtitle = "With the highest dose, the mean recorded length was almost identical.") +
  scale_fill_manual(values = vit_c_palette) +
  scale_alpha(range = c(0.4, 1)) +
  scale_x_discrete(breaks = c("0.5", "1", "2"), labels = function(x) paste0(x, " mg/day")) +
  coord_flip() +
  facet_wrap(supplement ~ ., ncol = 1) +
  theme_minimal(base_size = 15) +
  theme(legend.position = "none")

basic_plot
```


## <span style=color:#28A569>#2</span> - Add text hierarchy

Time to start playing with `theme()`!

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "3"
basic_plot +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"]))
```

## <span style=color:#28A569>#2</span> - Add text hierarchy

Time to start playing with `theme()`!

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "4"
basic_plot +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"]),
        plot.title = element_text(colour = vit_c_palette["dark_text"]))
```


## <span style=color:#28A569>#2</span> - Add text hierarchy

Time to start playing with `theme()`!

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "5-6"
basic_plot +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"]),
        plot.title = element_text(colour = vit_c_palette["dark_text"], 
                                  size = rel(1.5), 
                                  face = "bold"))
```


## <span style=color:#28A569>#2</span> - Add text hierarchy

Move away from the default fonts

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "4,8"
basic_plot +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"],
                            family = "Cabin"),
        plot.title = element_text(colour = vit_c_palette["dark_text"], 
                                  size = rel(1.5), 
                                  face = "bold",
                                  family = "Enriqueta"))
```


## <span style=color:#28A569>#2</span> - Add text hierarchy

Move away from the default fonts

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "9-11"
basic_plot +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"],
                            family = "Cabin"),
        plot.title = element_text(colour = vit_c_palette["dark_text"], 
                                  size = rel(1.5), 
                                  face = "bold",
                                  family = "Enriqueta"),
        strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"], 
                                  size = rel(1.1), face = "bold"),
        axis.text = element_text(colour = vit_c_palette["light_text"]))
```


## <span style=color:#28A569>#2</span> - Add text hierarchy

Choosing fonts can be tricky!

::: {.incremental}
- Brand guidelines
- [Datawrapper guidance](https://blog.datawrapper.de/fonts-for-data-visualization/) - avoid fonts that are too wide/narrow! 
- Websites + inspector tool
- Oliver Sch√∂ndorfer's exploration of the [Font Matrix](https://pimpmytype.com/font-matrix/)
:::

<center>
::: {.fragment}
![](https://pimpmytype.com/wp-content/uploads/2022/05/font-matrix-14-matches-columns-update.png){width=50%}
:::
</center>

::: footer
Find out more: [pimpmytype.com/font-matrix/](https://pimpmytype.com/font-matrix/)
:::


## <span style=color:#28A569>#2</span> - Add text hierarchy

Getting custom fonts to work can be frustrating!

> Install fonts locally + `{ragg}` + `{systemfonts}` + `{textshaping}` + Set graphics device to "AGG" + ü§û

::: {fragment}

![](https://c.tenor.com/OBcV0-r69mYAAAAC/throwing-computer-ron-swanson.gif)
<br>

:::

::: footer
Find out more: [yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/](https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/)
:::



## <span style=color:#28A569>#2</span> - Add text hierarchy

Give everything some space to breathe

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "9-10,11-12,16"
basic_plot +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"], 
                            family = "Cabin"),
        plot.title = element_text(colour = vit_c_palette["dark_text"], 
                                  size = rel(1.5), 
                                  face = "bold",
                                  family = "Enriqueta",
                                  lineheight = 1.3,
                                  margin = margin(0.5, 0, 1, 0, "lines")),
        plot.subtitle = element_text(size = rel(1.1), lineheight = 1.3,
                                     margin = margin(0, 0, 1, 0, "lines")),
        strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"], 
                                  size = rel(1.1), face = "bold",
                                  margin = margin(2, 0, 0.5, 0, "lines")),
        axis.text = element_text(colour = vit_c_palette["light_text"]))
```


## <span style=color:#28A569>#2</span> - Add text hierarchy

Remove unnecessary text

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "5"
basic_plot +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"], 
                            family = "Cabin"),
        axis.title.y = element_blank(),
        plot.title = element_text(colour = vit_c_palette["dark_text"], 
                                  size = rel(1.5), 
                                  face = "bold",
                                  family = "Enriqueta",
                                  lineheight = 1.3,
                                  margin = margin(0.5, 0, 1, 0, "lines")),
        plot.subtitle = element_text(size = rel(1.1), lineheight = 1.3,
                                     margin = margin(0, 0, 1, 0, "lines")),
        strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"], 
                                  size = rel(1.1), face = "bold",
                                  margin = margin(2, 0, 0.5, 0, "lines")),
        axis.text = element_text(colour = vit_c_palette["light_text"]))
```



## <span style=color:#28A569>#2</span> - Add text hierarchy

Watch out for that title!

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "9|2-3"
basic_plot +
  labs(title = "In smaller doses, Orange Juice was associated with greater mean tooth growth,
compared to equivalent doses of Vitamin C") +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"],
                            family = "Cabin"),
        axis.title.y = element_blank(),
        plot.title = element_text(colour = vit_c_palette["dark_text"], 
                                  size = 36, 
                                  face = "bold",
                                  family = "Enriqueta",
                                  lineheight = 1.3,
                                  margin = margin(0.5, 0, 1, 0, "lines")),
        plot.subtitle = element_text(size = rel(1.1), lineheight = 1.3,
                                     margin = margin(0, 0, 1, 0, "lines")),
        strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"], 
                                  size = rel(1.1), face = "bold",
                                  margin = margin(2, 0, 0.5, 0, "lines")),
        axis.text = element_text(colour = vit_c_palette["light_text"]))
```


## <span style=color:#28A569>#2</span> - Add text hierarchy

Watch out for that title!

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "2"
basic_plot +
  labs(title = "In smaller doses, Orange Juice was associated with greater mean tooth growth, compared to equivalent doses of Vitamin C") +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"],
                            family = "Cabin"),
        axis.title.y = element_blank(),
        plot.title = element_text(colour = vit_c_palette["dark_text"], 
                                  size = rel(1.5), 
                                  face = "bold",
                                  family = "Enriqueta",
                                  lineheight = 1.3,
                                  margin = margin(0.5, 0, 1, 0, "lines")),
        plot.subtitle = element_text(size = rel(1.1), lineheight = 1.3,
                                     margin = margin(0, 0, 1, 0, "lines")),
        strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"], 
                                  size = rel(1.1), face = "bold",
                                  margin = margin(2, 0, 0.5, 0, "lines")),
        axis.text = element_text(colour = vit_c_palette["light_text"]))
```



## <span style=color:#28A569>#2</span> - Add text hierarchy

I :heart: :package: `{ggtext}`

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "7,14"
basic_plot +
  labs(title = "In smaller doses, Orange Juice was associated with greater mean tooth growth, compared to equivalent doses of Vitamin C") +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"],
                            family = "Cabin"),
        axis.title.y = element_blank(),
        plot.title = ggtext::element_textbox_simple(
          colour = vit_c_palette["dark_text"], 
          size = rel(1.5), 
          face = "bold",
          family = "Enriqueta",
          lineheight = 1.3,
          margin = margin(0.5, 0, 1, 0, "lines")),
        plot.subtitle = ggtext::element_textbox_simple(
          size = rel(1.1), 
          lineheight = 1.3,
          margin = margin(0, 0, 1, 0, "lines")),
        strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"],
                                  size = rel(1.1), face = "bold",
                                  margin = margin(2, 0, 0.5, 0, "lines")),
        axis.text = element_text(colour = vit_c_palette["light_text"]))
```



## <span style=color:#28A569>#2</span> - Add text hierarchy + colour!

Hello, HTML + CSS! 

> `We can make text <span style='color:green'>green</span> and also <span style='color:green; font-size:60pt'>really big</span>! ü§Ø`

<br>

We can make text <span style='color:green'>green</span> and also <span style='color:green; font-size:60pt'>really big</span>! ü§Ø


## <span style=color:#28A569>#2</span> - Add text hierarchy + colour!

I :heart: :package: `{ggtext}`

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "2-7"
basic_plot +
  labs(title = 
         paste0("In smaller doses, **<span style='color:",
                vit_c_palette["Orange Juice"], "'>Orange Juice</span>**
                      was associated with greater mean tooth growth,
                      compared to equivalent doses of **<span style='color:",
                vit_c_palette["Vitamin C"], "'>Vitamin C</span>**")
  ) +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"],
                            family = "Cabin"),
        axis.title.y = element_blank(),
        plot.title = ggtext::element_textbox_simple(colour = vit_c_palette["dark_text"], 
                                  size = rel(1.5), 
                                  face = "bold",
                                  family = "Enriqueta",
                                  lineheight = 1.3,
                                  margin = margin(0.5, 0, 1, 0, "lines")),
        plot.subtitle = ggtext::element_textbox_simple(family = "Cabin", size = rel(1.1), lineheight = 1.3,
                                     margin = margin(0, 0, 1, 0, "lines")),
        strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"],
                                  size = rel(1.1), face = "bold",
                                  margin = margin(2, 0, 0.5, 0, "lines")),
        axis.text = element_text(colour = vit_c_palette["light_text"]))
```


## <span style=color:#28A569>#2</span> - Add text hierarchy {background=#2C3D4F}

See for yourselves!

:::: {.columns}

::: {.column width=50%}

```{r}
basic_plot
```

:::


::: {.column width=50%}

```{r}
themed_plot <- basic_plot +
  labs(title = 
         paste0("In smaller doses, **<span style='color:",
                vit_c_palette["Orange Juice"], "'>Orange Juice</span>**
                      was associated with greater mean tooth growth,
                      compared to equivalent doses of **<span style='color:",
                vit_c_palette["Vitamin C"], "'>Vitamin C</span>**")
  ) +
  theme(legend.position = "none",
        text = element_text(colour = vit_c_palette["light_text"],
                            family = "Cabin"),
        axis.title.y = element_blank(),
        plot.title = ggtext::element_textbox_simple(colour = vit_c_palette["dark_text"], 
                                  size = rel(1.5), 
                                  face = "bold",
                                  family = "Enriqueta",
                                  lineheight = 1.3,
                                  margin = margin(0.5, 0, 1, 0, "lines")),
        plot.subtitle = ggtext::element_textbox_simple(family = "Cabin", size = rel(1.1), lineheight = 1.3,
                                     margin = margin(0, 0, 1, 0, "lines")),
        strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"],
                                  size = rel(1.1), face = "bold",
                                  margin = margin(2, 0, 0.5, 0, "lines")),
        axis.text = element_text(colour = vit_c_palette["light_text"])) 

themed_plot
```

:::

::::


## Five tips for beautiful annotations {auto-animate=true}

### <span style=color:#28A569>#1</span> - Use colour and orientation purposefully {.faded}

### <span style=color:#28A569>#2</span> - Add text hierarchy {.faded}

### <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

### <span style=color:#28A569>#4</span> - Highlight important patterns {.faded}

### <span style=color:#28A569>#5</span> - See how much you can declutter {.faded}

### Bonus track - `{gghighlight}` & curved arrows {.faded}


## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

We've made it easy to see what's what. Now, let's make it even easier to compare values.


```{r}
#| output-location: column
#| echo: true
themed_plot

```


## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

We've made it easy to see what's what. Now, let's make it even easier to compare values.


```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "2"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5))

```


## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

We've made it easy to see what's what. Now, let's make it even easier to compare values.

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "3-7"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"],
                                  size = rel(1.1), face = "bold",
                                  hjust = 0.03,
                                  margin = margin(2, 0, 0.5, 0, "lines")))
```


## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

Time to add some text boxes! 

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "4-6"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  # x (dose) and y (mean_length) are already 
  # set in the global ggplot() call! 
  ggtext::geom_textbox(aes(label = mean_length))

```


## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

Time to add some text boxes! 

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "5-7"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  ggtext::geom_textbox(aes(label = mean_length),
                       size = 6,
                       halign = 1, 
                       hjust = 1)

```

::: footer
Find out more: [Alignment Cheatsheet](https://www.cararthompson.com/posts/2021-09-02-alignment-cheat-sheet/)
:::


## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

Time to add some text boxes! 

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "8-9"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  ggtext::geom_textbox(aes(label = mean_length),
                       size = 6,
                       halign = 1, 
                       hjust = 1,
                       fill = NA, 
                       box.colour = NA)
```



## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

Time to add some text boxes! 

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "10-12"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  ggtext::geom_textbox(aes(label = mean_length),
                       size = 6,
                       halign = 1, 
                       hjust = 1,
                       fill = NA,
                       box.colour = NA,
                       family = "Cabin",
                       colour = "#FFFFFF",
                       fontface = "bold")

```



## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

Now for the fun stuff... 

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "6-9"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  ggtext::geom_textbox(aes(
    label = mean_length,
    hjust = case_when(mean_length < 15 ~ 0,
                      TRUE ~ 1),
    halign = case_when(mean_length < 15 ~ 0,
                       TRUE ~ 1)),
    size = 6,
    fill = NA,
    box.colour = NA,
    family = "Cabin",
    fontface = "bold")

```





## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

Now for the fun stuff... 

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "10-11"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  ggtext::geom_textbox(aes(
    label = mean_length,
    hjust = case_when(mean_length < 15 ~ 0,
                      TRUE ~ 1),
    halign = case_when(mean_length < 15 ~ 0,
                       TRUE ~ 1),
    colour = case_when(mean_length > 15 ~ "#FFFFFF",
                       TRUE ~ vit_c_palette[supplement])),
    size = 6,
    fill = NA,
    box.colour = NA,
    family = "Cabin",
    fontface = "bold")

```



## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

?????? 

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "10-11"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  ggtext::geom_textbox(aes(
    label = mean_length,
    hjust = case_when(mean_length < 15 ~ 0,
                      TRUE ~ 1),
    halign = case_when(mean_length < 15 ~ 0,
                       TRUE ~ 1),
    colour = case_when(mean_length > 15 ~ "#FFFFFF",
                       TRUE ~ vit_c_palette[supplement])),
    size = 6,
    fill = NA,
    box.colour = NA,
    family = "Cabin",
    fontface = "bold")

```


## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

`scale_colour_identity()` required!

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "4"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  scale_colour_identity() +
  ggtext::geom_textbox(aes(
    label = mean_length,
    hjust = case_when(mean_length < 15 ~ 0,
                      TRUE ~ 1),
    halign = case_when(mean_length < 15 ~ 0,
                       TRUE ~ 1),
    colour = case_when(mean_length > 15 ~ "#FFFFFF",
                       TRUE ~ vit_c_palette[supplement])),
    size = 6,
    fill = NA,
    box.colour = NA,
    family = "Cabin",
    fontface = "bold")

```


## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement 

We might as well add a bit of extra info (with text hierarchy!) to our labels...

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "6-8"
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta", colour = vit_c_palette["light_text"], size = rel(1.1), face = "bold", hjust = 0.03, margin = margin(2, 0, 0.5, 0, "lines"))) +
  scale_colour_identity() +
  ggtext::geom_textbox(aes(
    label = paste0("<span style=font-size:12pt>", 
                   dose, "mg/day</span><br>", 
                   mean_length, "mm"),
    hjust = case_when(mean_length < 15 ~ 0,
                      TRUE ~ 1),
    halign = case_when(mean_length < 15 ~ 0,
                       TRUE ~ 1),
    colour = case_when(mean_length > 15 ~ "#FFFFFF",
                       TRUE ~ vit_c_palette[supplement])),
    size = 6,
    fill = NA,
    box.colour = NA,
    family = "Cabin",
    fontface = "bold")

```


# Wait, but why? {background=#2C3D4F}

::: {.fragment}

![](https://img.memegenerator.net/images/8719638.jpg)

:::

## <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement {background=#2C3D4F}

Easier than you think and makes a big difference! ü¶∏ 


:::: {.columns}

::: {.column width=50%}

```{r}
themed_plot
```

:::


::: {.column width=50%}

```{r}
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"],
                                  size = rel(1.1), face = "bold",
                                  hjust = 0.03,
                                  margin = margin(2, 0, 0.5, 0, "lines"))) +
  scale_colour_identity() +
  ggtext::geom_textbox(aes(
    label = paste0("<span style=font-size:12pt>", 
                   dose, "mg/day</span><br>", 
                   mean_length, "mm"),
    hjust = case_when(mean_length < 15 ~ 0,
                      TRUE ~ 1),
    halign = case_when(mean_length < 15 ~ 0,
                       TRUE ~ 1),
    colour = case_when(mean_length > 15 ~ "#FFFFFF",
                       TRUE ~ vit_c_palette[supplement])),
    size = 6,
    fill = NA,
    box.colour = NA,
    family = "Cabin",
    fontface = "bold")
```

:::

::::


## Five tips for beautiful annotations 

### <span style=color:#28A569>#1</span> - Use colour and orientation purposefully {.faded}

### <span style=color:#28A569>#2</span> - Add text hierarchy  {.faded}

### <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement  {.faded}

### <span style=color:#28A569>#4</span> - Highlight important patterns

### <span style=color:#28A569>#5</span> - See how much you can declutter {.faded}

### <span style=color:#28A569>Bonus track</span> - `{gghighlight}`, Tee pipe and curved arrows {.faded}


## <span style=color:#28A569>#4</span> - Highlight important patterns

"That's all well and good, but we all know summary data can be misleading..."

:::: {.columns}

::: {.column width=50%}

::: {.fragment}

```{r}

set.seed(2302) #

basic_scatter_plot <- ToothGrowth %>%
  mutate(guinea_pig_name = sample(unique(bakeoff::bakers$baker), 60),
         supplement = case_when(supp == "OJ" ~ "Orange Juice",
                                supp == "VC" ~ "Vitamin C",
                                TRUE ~ as.character(supp))) %T>%
  {
    {
      # Double assign to jump out of the pipe!
      min_max_gps <<- group_by(., supplement, dose) %>%
        filter(., len == min(len) | len == max(len)) %>%
        mutate(min_or_max = case_when(len == max(len) ~ "max",
                                      TRUE ~ "min"))
    }
  } %>%
  ggplot(aes(x = dose, y = len, fill = supplement,
             colour = supplement)) +
  geom_point(shape = 21,
             colour = "#FFFFFF",
             size = 6,
             alpha = 0.8) +
  labs(x = "Dose",
       y = "Length (mm)",
       title = "Increased dose was associated with greater tooth growth across both Orange Juice and Vitamin C,
with diminishing returns for Vitamin C.",
subtitle = "Vitamin C was also associated with greater variability at the highest dose.")

basic_scatter_plot

```

:::

:::

::: {.column width=50%}

::: {.fragment}

```{r}

themed_scatter_plot <- basic_scatter_plot +
  scale_x_continuous(breaks = c(0.5, 1.0, 2.0), labels = function(x) paste0(x, " mg/day")) +
  scale_fill_manual(values = vit_c_palette) +
  theme_minimal(base_size = 15) +
  theme(legend.position = "none",
        text = element_text(family = "Cabin", colour = vit_c_palette["light_text"]),
        plot.title = ggtext::element_textbox_simple(family = "Enriqueta", size = rel(1.4), face = "bold",
                                                    lineheight = 1.3,
                                                    margin = margin(0.5, 0, 1, 0, "lines"),
                                                    halign = 0, colour = vit_c_palette["dark_text"]),
        plot.subtitle = ggtext::element_textbox_simple(family = "Cabin", size = rel(1.1), lineheight = 1.3,
                                                       margin = margin(0, 0, 1, 0, "lines"),
                                                       halign = 0.9),
        axis.text = element_text(family = "Cabin", colour = vit_c_palette["light_text"]),
        axis.title = element_text(face = "bold")
  )

themed_scatter_plot

```

:::

:::

::::

::: footer
Find out more: [cararthompson.com/talks/nhsr2022-ggplot-themes](https://www.cararthompson.com/talks/nhsr2022-ggplot-themes/)
:::


## <span style=color:#28A569>#4</span> - Highlight important patterns

I :heart: :package: `{geomtextpath}`


```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "2-3"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", 
                              aes(label = supplement))



```




## <span style=color:#28A569>#4</span> - Highlight important patterns

I :heart: :package: `{geomtextpath}`


```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "4"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", 
                              aes(label = supplement)) +
  scale_colour_manual(values = vit_c_palette)



```


## <span style=color:#28A569>#4</span> - Highlight important patterns

I :heart: :package: `{geomtextpath}`


```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "3-4"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement),
                              hjust = 0.1,
                              vjust = 0.3) +
  scale_colour_manual(values = vit_c_palette)



```



## <span style=color:#28A569>#4</span> - Highlight important patterns

I :heart: :package: `{geomtextpath}`

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "5-6"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement),
                              hjust = 0.1,
                              vjust = 0.3,
                              fontface = "bold",
                              family = "Cabin") +
  scale_colour_manual(values = vit_c_palette)

```



## <span style=color:#28A569>#4</span> - Highlight important patterns

More textboxes with markdown and conditional alignment (horizontal *and* vertical!)

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "9-19"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement),
                              hjust = 0.1,
                              vjust = 0.3,
                              fontface = "bold",
                              family = "Cabin") +
  ggtext::geom_textbox(data = filter(min_max_gps,
                                     dose %in% c(1, 2)),
                       aes(x = case_when(dose < 1.5 ~ dose + 0.05,
                                         TRUE ~ dose - 0.05),
                           y = case_when(min_or_max  == "max"~ len * 1.1,
                                         TRUE ~ len * 0.9),
                           label = paste0("**<span style='font-family:Enriqueta'>", 
                                          guinea_pig_name,
                                          "</span>** - ", len, " mm"),
                           hjust = case_when(dose < 1.5 ~ 0,
                                             TRUE ~ 1),
                           halign = case_when(dose < 1.5 ~ 0,
                                              TRUE ~ 1)),
                       family = "Cabin",
                       size = 4,
                       fill = NA,
                       box.colour = NA) +
  scale_colour_manual(values = vit_c_palette)

```



## <span style=color:#28A569>#4</span> - Highlight important patterns

Sometimes less is more!

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "8"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement),
                              hjust = 0.1,
                              vjust = 0.3,
                              fontface = "bold",
                              family = "Cabin") +
  ggtext::geom_textbox(data = filter(min_max_gps,
                                     dose == 2),
                       aes(x = case_when(dose < 1.5 ~ dose + 0.05,
                                         TRUE ~ dose - 0.05),
                           y = case_when(min_or_max  == "max"~ len * 1.1,
                                         TRUE ~ len * 0.9),
                           label = paste0("**<span style='font-family:Enriqueta'>", 
                                          guinea_pig_name,
                                          "</span>** - ", len, " mm"),
                           hjust = case_when(dose < 1.5 ~ 0,
                                             TRUE ~ 1),
                           halign = case_when(dose < 1.5 ~ 0,
                                              TRUE ~ 1)),
                       family = "Cabin",
                       size = 4,
                       fill = NA,
                       box.colour = NA) +
  scale_colour_manual(values = vit_c_palette)

```



## <span style=color:#28A569>#4</span> - Highlight important patterns

Same principle, let's add in some arrows! 

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "15-26"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement),
                              hjust = 0.1,
                              vjust = 0.3,
                              fontface = "bold",
                              family = "Cabin") +
  ggtext::geom_textbox(data = filter(min_max_gps,
                                     dose == 2),
                       aes(x = case_when(dose < 1.5 ~ dose + 0.05, TRUE ~ dose - 0.05),
                           y = case_when(min_or_max  == "max"~ len * 1.1, TRUE ~ len * 0.9),
                           label = paste0("**<span style='font-family:Enriqueta'>", guinea_pig_name,"</span>** - ", len, " mm"),
                           hjust = case_when(dose < 1.5 ~ 0,TRUE ~ 1),
                           halign = case_when(dose < 1.5 ~ 0, TRUE ~ 1)),
                       family = "Cabin", size = 4, fill = NA, box.colour = NA) +
  geom_curve(data = filter(min_max_gps,
                           dose == 2),
             aes(x = case_when(dose < 1.5 ~ dose + 0.05,
                               TRUE ~ dose - 0.05),
                 y = case_when(min_or_max  == "max"~ len * 1.1,
                               TRUE ~ len * 0.9),
                 xend = case_when(dose < 1.5 ~ dose + 0.02,
                                  TRUE ~ dose - 0.02),
                 yend = case_when(min_or_max  == "max"~ len + 0.5,
                                  TRUE ~ len - 0.5)),
             arrow = arrow(length = unit(0.1, "cm")),
             alpha = 0.5) + 
  scale_colour_manual(values = vit_c_palette)

```


## <span style=color:#28A569>#4</span> - Highlight important patterns

Same principle, let's add in some arrows! 

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "25"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement),
                              hjust = 0.1,
                              vjust = 0.3,
                              fontface = "bold",
                              family = "Cabin") +
  ggtext::geom_textbox(data = filter(min_max_gps,
                                     dose == 2),
                       aes(x = case_when(dose < 1.5 ~ dose + 0.05, TRUE ~ dose - 0.05),
                           y = case_when(min_or_max  == "max"~ len * 1.1, TRUE ~ len * 0.9),
                           label = paste0("**<span style='font-family:Enriqueta'>", guinea_pig_name,"</span>** - ", len, " mm"),
                           hjust = case_when(dose < 1.5 ~ 0,TRUE ~ 1),
                           halign = case_when(dose < 1.5 ~ 0, TRUE ~ 1)),
                       family = "Cabin", size = 4, fill = NA, box.colour = NA) +
  geom_curve(data = filter(min_max_gps,
                           dose == 2),
             aes(x = case_when(dose < 1.5 ~ dose + 0.05,
                               TRUE ~ dose - 0.05),
                 y = case_when(min_or_max  == "max"~ len * 1.1,
                               TRUE ~ len * 0.9),
                 xend = case_when(dose < 1.5 ~ dose + 0.02,
                                  TRUE ~ dose - 0.02),
                 yend = case_when(min_or_max  == "max"~ len + 0.5,
                                  TRUE ~ len - 0.5)),
             curvature = 0.1,
             arrow = arrow(length = unit(0.1, "cm")),
             alpha = 0.5) + 
  scale_colour_manual(values = vit_c_palette)

```



## <span style=color:#28A569>#4</span> - Highlight important patterns

Same principle, let's add in some arrows! 

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "25"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement),
                              hjust = 0.1,
                              vjust = 0.3,
                              fontface = "bold",
                              family = "Cabin") +
  ggtext::geom_textbox(data = filter(min_max_gps,
                                     dose == 2),
                       aes(x = case_when(dose < 1.5 ~ dose + 0.05, TRUE ~ dose - 0.05),
                           y = case_when(min_or_max  == "max"~ len * 1.1, TRUE ~ len * 0.9),
                           label = paste0("**<span style='font-family:Enriqueta'>", guinea_pig_name,"</span>** - ", len, " mm"),
                           hjust = case_when(dose < 1.5 ~ 0,TRUE ~ 1),
                           halign = case_when(dose < 1.5 ~ 0, TRUE ~ 1)),
                       family = "Cabin", size = 4, fill = NA, box.colour = NA) +
  geom_curve(data = filter(min_max_gps,
                           dose == 2),
             aes(x = case_when(dose < 1.5 ~ dose + 0.05,
                               TRUE ~ dose - 0.05),
                 y = case_when(min_or_max  == "max"~ len * 1.1,
                               TRUE ~ len * 0.9),
                 xend = case_when(dose < 1.5 ~ dose + 0.02,
                                  TRUE ~ dose - 0.02),
                 yend = case_when(min_or_max  == "max"~ len + 0.5,
                                  TRUE ~ len - 0.5)),
             curvature = 0,
             arrow = arrow(length = unit(0.1, "cm")),
             alpha = 0.5) + 
  scale_colour_manual(values = vit_c_palette)

```


## <span style=color:#28A569>#4</span> - Highlight important patterns {background=#2C3D4F}

Nearly there, folks! Look how far we've come! 

:::: {.columns}

::: {.column width=50%}

```{r}

themed_scatter_plot

```

:::


::: {.column width=50%}

```{r}

annotated_scatter_plot <- themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement),
                              hjust = 0.1,
                              vjust = 0.3,
                              fontface = "bold",
                              family = "Cabin") +
  ggtext::geom_textbox(data = filter(min_max_gps,
                                     dose == 2),
                       aes(x = case_when(dose < 1.5 ~ dose + 0.05, TRUE ~ dose - 0.05),
                           y = case_when(min_or_max  == "max"~ len * 1.1, TRUE ~ len * 0.9),
                           label = paste0("**<span style='font-family:Enriqueta'>", guinea_pig_name,"</span>** - ", len, " mm"),
                           hjust = case_when(dose < 1.5 ~ 0,TRUE ~ 1),
                           halign = case_when(dose < 1.5 ~ 0, TRUE ~ 1)),
                       family = "Cabin", size = 4, fill = NA, box.colour = NA) +
  geom_curve(data = filter(min_max_gps,
                           dose == 2),
             aes(x = case_when(dose < 1.5 ~ dose + 0.05,
                               TRUE ~ dose - 0.05),
                 y = case_when(min_or_max  == "max"~ len * 1.1,
                               TRUE ~ len * 0.9),
                 xend = case_when(dose < 1.5 ~ dose + 0.02,
                                  TRUE ~ dose - 0.02),
                 yend = case_when(min_or_max  == "max"~ len + 0.5,
                                  TRUE ~ len - 0.5)),
             curvature = 0,
             arrow = arrow(length = unit(0.1, "cm")),
             alpha = 0.5) + 
  scale_colour_manual(values = vit_c_palette)

annotated_scatter_plot

```

:::

::::


## Five tips for beautiful annotations 

### <span style=color:#28A569>#1</span> - Use colour and orientation purposefully {.faded}

### <span style=color:#28A569>#2</span> - Add text hierarchy  {.faded}

### <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement  {.faded}

### <span style=color:#28A569>#4</span> - Highlight important patterns {.faded}

### <span style=color:#28A569>#5</span> - See how much you can declutter 

### <span style=color:#28A569>Bonus track</span> - `{gghighlight}`, Tee pipe and curved arrows {.faded}


## <span style=color:#28A569>#5</span> - See how much you can declutter

:::: {.columns}

::: {.column width=50%}

Be brave - try `theme_void()`

- Do we need the grid?
- Any text we don't need?
- Any colours that don't fit with our colour scheme?

:::

::: {.column width=50%}

::: {.fragment}

```{r}
themed_plot +
  scale_y_continuous(expand = c(0, 0.5)) +
  theme(strip.text = element_text(family = "Enriqueta",
                                  colour = vit_c_palette["light_text"],
                                  size = rel(1.1), face = "bold",
                                  hjust = 0.03,
                                  margin = margin(2, 0, 0.5, 0, unit = "lines"))) +
  scale_colour_identity() +
  ggtext::geom_textbox(aes(
    label = paste0("<span style=font-size:12pt>", 
                   dose, "mg/day</span><br>", 
                   mean_length, "mm"),
    hjust = case_when(mean_length < 15 ~ 0,
                      TRUE ~ 1),
    halign = case_when(mean_length < 15 ~ 0,
                       TRUE ~ 1),
    colour = case_when(mean_length > 15 ~ "#FFFFFF",
                       TRUE ~ vit_c_palette[supplement])),
    size = 6,
    fill = NA,
    box.colour = NA,
    family = "Cabin",
    fontface = "bold") +
  theme(panel.grid = element_blank())

```

:::

:::

::::

## <span style=color:#28A569>#5</span> - See how much you can declutter 

Tweak the grid lines, using a matching colour - `{monochromeR}`

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "2"
annotated_scatter_plot +
  theme(panel.grid = element_line(colour = "#F0F0EF"))

```

## <span style=color:#28A569>#5</span> - See how much you can declutter 

And add a bit of white space

```{r}
#| output-location: column
#| echo: true
#| code-line-numbers: "3"
annotated_scatter_plot +
  theme(panel.grid = element_line(colour = "#F0F0EF"),
        plot.margin = margin(12, 8, 12, 8))

```


## <span style=color:#28A569>#5</span> - See how much you can declutter {background=#2C3D4F}

:::: {.columns}

::: {.column width=50%}

```{r}
annotated_scatter_plot
```

:::

::: {.column width=50%}

```{r}
annotated_scatter_plot +
  theme(panel.grid = element_line(colour = "#F0F0EF"),
        plot.margin = margin(12, 8, 12, 8))

```

:::

::::


## Five tips for beautiful annotations 

### <span style=color:#28A569>#1</span> - Use colour and orientation purposefully {.faded}

### <span style=color:#28A569>#2</span> - Add text hierarchy  {.faded}

### <span style=color:#28A569>#3</span> - Reduce unnecessary eye movement  {.faded}

### <span style=color:#28A569>#4</span> - Highlight important patterns {.faded}

### <span style=color:#28A569>#5</span> - See how much you can declutter {.faded}

### <span style=color:#28A569>Bonus track</span> - `{gghighlight}`, Tee pipe and curved arrows


# <span style=color:#28A569>Bonus track</span> - `{gghighlight}`, Tee pipe and curved arrows {background=#2C3D4F}

## {gghighlight}

*"But I have way more conditions than this, how can I highlight a more subtle pattern?"*

::: {fragment}

> Suppose we have data that has so many series that it is hard to identify them by their colours as the differences are so subtle...

![](https://yutannihilation.github.io/gghighlight/articles/gghighlight_files/figure-html/gghighlight-simple-1.png)

<br>

:::

:::footer
Find out more: [yutannihilation.github.io/gghighlight/](https://yutannihilation.github.io/gghighlight/)
:::


## {gghighlight}

Nicola Rennie's **Hollywood Age Gaps** plot

![](images/Fo7VnZ1XwAA0C9Q.jpg)

:::footer
Find out more: [twitter.com/nrennie35](https://twitter.com/nrennie35/status/1625471525448032260)
:::


## Tee pipe

Creating label content on the fly

```{r}
#| echo: true
#| eval: false

ToothGrowth %>%
  mutate(guinea_pig_name = sample(unique(bakeoff::bakers$baker), 60),
         supplement = case_when(supp == "OJ" ~ "Orange Juice",
                                supp == "VC" ~ "Vitamin C",
                                TRUE ~ as.character(supp))) %T>%
  {
    {
      # Double assign to jump out of the pipe!
      min_max_gps <<- group_by(., supplement, dose) %>%
        filter(., len == min(len) | len == max(len)) %>%
        mutate(min_or_max = case_when(len == max(len) ~ "max",
                                      TRUE ~ "min"))
    }
  } %>%
  ggplot(aes(x = dose, y = len, fill = supplement,
             colour = supplement)) +
  ...

```


## Curved arrows

Conditional `curvatures`? 

```{r}
#| output-location: column-fragment
#| echo: true
#| code-line-numbers: "10-12,17|20-22,27"
themed_scatter_plot +
  geomtextpath::geom_textline(stat = "smooth", aes(label = supplement), hjust = 0.1, vjust = 0.3, fontface = "bold", family = "Cabin") +
  ggtext::geom_textbox(data = filter(min_max_gps, dose == 2),
                       aes(x = case_when(dose < 1.5 ~ dose + 0.05, TRUE ~ dose - 0.05),
                           y = case_when(min_or_max  == "max"~ len * 1.1, TRUE ~ len * 0.9),
                           label = paste0("**<span style='font-family:Enriqueta'>", guinea_pig_name,"</span>** - ", len, " mm"),
                           hjust = case_when(dose < 1.5 ~ 0,TRUE ~ 1),
                           halign = case_when(dose < 1.5 ~ 0, TRUE ~ 1)),
                       family = "Cabin", size = 4, fill = NA, box.colour = NA) +
  geom_curve(data = filter(min_max_gps,
                           dose == 2 & 
                             min_or_max == "max"),
             aes(x = case_when(dose < 1.5 ~ dose + 0.05, TRUE ~ dose - 0.05),
                 y = case_when(min_or_max  == "max"~ len * 1.1, TRUE ~ len * 0.9),
                 xend = case_when(dose < 1.5 ~ dose + 0.02, TRUE ~ dose - 0.02),
                 yend = case_when(min_or_max  == "max"~ len + 0.5,TRUE ~ len - 0.5)),
             curvature = -0.1,
             arrow = arrow(length = unit(0.1, "cm")),
             alpha = 0.5) + 
  geom_curve(data = filter(min_max_gps,
                           dose == 2 & 
                             min_or_max == "min"),
             aes(x = case_when(dose < 1.5 ~ dose + 0.05, TRUE ~ dose - 0.05),
                 y = case_when(min_or_max  == "max"~ len * 1.1, TRUE ~ len * 0.9),
                 xend = case_when(dose < 1.5 ~ dose + 0.02, TRUE ~ dose - 0.02),
                 yend = case_when(min_or_max  == "max"~ len + 0.5, TRUE ~ len - 0.5)),
             curvature = 0.1,
             arrow = arrow(length = unit(0.1, "cm")),
             alpha = 0.5) +
  scale_colour_manual(values = vit_c_palette)

```


## Curved arrows

To avoid it getting too unwieldy, add the curvatures to your data and iterate. 


```{r}
#| echo: true
#| eval: false

labelled_plot # plot with everything but the arrows

for(curv in unique(my_data$curvature)) {

  filtered_data <- filter(my_data, 
                          curvature == curv)

  labelled_plot <- labelled_plot +
    annotate(geom = "curve", 
             x = filtered_data$label_x, 
             y = filtered_data$label_y, 
             xend = filtered_data$arrow_end_x, 
             yend = filtered_data$arrow_end_y, 
             size = 0.3,
             colour = case_when(filtered_data$species == "Adelie" ~ penguin_palette$Adelie,
                                filtered_data$species == "Chinstrap" ~ penguin_palette$Chinstrap,
                                filtered_data$species == "Gentoo" ~ penguin_palette$Gentoo),
             curvature = curv,
             arrow = arrow(length = unit(1.5, "mm")))
}

labelled_plot # plot with as many different curvatures as you like!

```

:::footer
Find out more: [cararthompson.com/talks/user2022](https://www.cararthompson.com/talks/user2022/)
:::


# Over to you! {background=#2C3D4F}
